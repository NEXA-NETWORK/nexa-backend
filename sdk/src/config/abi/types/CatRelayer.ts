/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface CatRelayerInterface extends utils.Interface {
  functions: {
    "computeAddress(bytes32,string,string,uint8)": FunctionFragment;
    "deployToken(string,string,uint8,uint256,bytes32,address,uint16)": FunctionFragment;
    "initiateBridgeOut(address,uint256,uint16,bytes32,uint32,string)": FunctionFragment;
    "initiateTokensDeployment(bytes,uint256[],uint256[],uint256)": FunctionFragment;
    "handleDeployProxyToken(address,bytes32,address)": FunctionFragment;
    "initiateProxyBridgeOut(address,address,uint256,uint16,bytes32,uint32,string)": FunctionFragment;
    "computeAddressNFT(bytes32,string,string)": FunctionFragment;
    "deployNFT(string,string,uint256,bytes32,address,string)": FunctionFragment;
    "initiateBridgeOutNFT(address,uint256,uint16,bytes32,uint32,string)": FunctionFragment;
    "initiateNFTDeployment(bytes,uint256[],uint256[],uint256)": FunctionFragment;
    "handleDeployProxyNFT(address,bytes32,address)": FunctionFragment;
    "initiateProxyBridgeOutNFT(address,address,uint256,uint16,bytes32,uint32,string)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "computeAddress"
      | "deployToken"
      | "initiateBridgeOut"
      | "initiateTokensDeployment"
      | "handleDeployProxyToken"
      | "initiateProxyBridgeOut"
      | "computeAddressNFT"
      | "deployNFT"
      | "initiateBridgeOutNFT"
      | "initiateNFTDeployment"
      | "handleDeployProxyNFT"
      | "initiateProxyBridgeOutNFT"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "computeAddress",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateBridgeOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateTokensDeployment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleDeployProxyToken",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateProxyBridgeOut",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "computeAddressNFT",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deployNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateBridgeOutNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateNFTDeployment",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>[],
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "handleDeployProxyNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "initiateProxyBridgeOutNFT",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "computeAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deployToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateBridgeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateTokensDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDeployProxyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateProxyBridgeOut",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computeAddressNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deployNFT", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "initiateBridgeOutNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateNFTDeployment",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "handleDeployProxyNFT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initiateProxyBridgeOutNFT",
    data: BytesLike
  ): Result;

  events: {
    "InitiateTokenDeployment(address,bytes,uint256[],uint256[],uint256)": EventFragment;
    "InitiatedBridgeOut(address,address,uint256,uint16,bytes32,uint256,uint256,string)": EventFragment;
    "TokenDeployed(address,address,string,string,uint8,bytes32)": EventFragment;
    "InitiatedProxyBridgeOut(address,address,address,uint256,uint16,bytes32,uint256,uint256,string)": EventFragment;
    "ProxyTokenDeployed(address,address,bytes32)": EventFragment;
    "InitiateNFTDeployment(address,bytes,uint256[],uint256[],uint256)": EventFragment;
    "InitiatedBridgeOutNFT(address,address,uint256,uint16,bytes32,uint256,uint256,string)": EventFragment;
    "NFTDeployed(address,address,string,string,bytes32)": EventFragment;
    "InitiatedProxyBridgeOutNFT(address,address,address,uint256,uint16,bytes32,uint256,uint256,string)": EventFragment;
    "ProxyNFTDeployed(address,address,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "InitiateTokenDeployment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiatedBridgeOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiatedProxyBridgeOut"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyTokenDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiateNFTDeployment"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiatedBridgeOutNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "NFTDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "InitiatedProxyBridgeOutNFT"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProxyNFTDeployed"): EventFragment;
}

export interface InitiateTokenDeploymentEventObject {
  owner: string;
  params: string;
  destinationChains: BigNumber[];
  gasValues: BigNumber[];
  tokenMintingChain: BigNumber;
}
export type InitiateTokenDeploymentEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], BigNumber],
  InitiateTokenDeploymentEventObject
>;

export type InitiateTokenDeploymentEventFilter =
  TypedEventFilter<InitiateTokenDeploymentEvent>;

export interface InitiatedBridgeOutEventObject {
  caller: string;
  token: string;
  amount: BigNumber;
  destinationChain: number;
  recipient: string;
  nonce: BigNumber;
  gasValue: BigNumber;
  trackId: string;
}
export type InitiatedBridgeOutEvent = TypedEvent<
  [string, string, BigNumber, number, string, BigNumber, BigNumber, string],
  InitiatedBridgeOutEventObject
>;

export type InitiatedBridgeOutEventFilter =
  TypedEventFilter<InitiatedBridgeOutEvent>;

export interface TokenDeployedEventObject {
  owner: string;
  token: string;
  name: string;
  symbol: string;
  decimals: number;
  salt: string;
}
export type TokenDeployedEvent = TypedEvent<
  [string, string, string, string, number, string],
  TokenDeployedEventObject
>;

export type TokenDeployedEventFilter = TypedEventFilter<TokenDeployedEvent>;

export interface InitiatedProxyBridgeOutEventObject {
  caller: string;
  token: string;
  proxyToken: string;
  amount: BigNumber;
  destinationChain: number;
  recipient: string;
  nonce: BigNumber;
  gasValue: BigNumber;
  trackId: string;
}
export type InitiatedProxyBridgeOutEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  InitiatedProxyBridgeOutEventObject
>;

export type InitiatedProxyBridgeOutEventFilter =
  TypedEventFilter<InitiatedProxyBridgeOutEvent>;

export interface ProxyTokenDeployedEventObject {
  owner: string;
  token: string;
  salt: string;
}
export type ProxyTokenDeployedEvent = TypedEvent<
  [string, string, string],
  ProxyTokenDeployedEventObject
>;

export type ProxyTokenDeployedEventFilter =
  TypedEventFilter<ProxyTokenDeployedEvent>;

export interface InitiateNFTDeploymentEventObject {
  owner: string;
  params: string;
  destinationChains: BigNumber[];
  gasValues: BigNumber[];
  tokenMintingChain: BigNumber;
}
export type InitiateNFTDeploymentEvent = TypedEvent<
  [string, string, BigNumber[], BigNumber[], BigNumber],
  InitiateNFTDeploymentEventObject
>;

export type InitiateNFTDeploymentEventFilter =
  TypedEventFilter<InitiateNFTDeploymentEvent>;

export interface InitiatedBridgeOutNFTEventObject {
  caller: string;
  token: string;
  amount: BigNumber;
  destinationChain: number;
  recipient: string;
  nonce: BigNumber;
  gasValue: BigNumber;
  trackId: string;
}
export type InitiatedBridgeOutNFTEvent = TypedEvent<
  [string, string, BigNumber, number, string, BigNumber, BigNumber, string],
  InitiatedBridgeOutNFTEventObject
>;

export type InitiatedBridgeOutNFTEventFilter =
  TypedEventFilter<InitiatedBridgeOutNFTEvent>;

export interface NFTDeployedEventObject {
  owner: string;
  token: string;
  name: string;
  symbol: string;
  salt: string;
}
export type NFTDeployedEvent = TypedEvent<
  [string, string, string, string, string],
  NFTDeployedEventObject
>;

export type NFTDeployedEventFilter = TypedEventFilter<NFTDeployedEvent>;

export interface InitiatedProxyBridgeOutNFTEventObject {
  caller: string;
  token: string;
  proxyToken: string;
  tokenId: BigNumber;
  destinationChain: number;
  recipient: string;
  nonce: BigNumber;
  gasValue: BigNumber;
  trackId: string;
}
export type InitiatedProxyBridgeOutNFTEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    number,
    string,
    BigNumber,
    BigNumber,
    string
  ],
  InitiatedProxyBridgeOutNFTEventObject
>;

export type InitiatedProxyBridgeOutNFTEventFilter =
  TypedEventFilter<InitiatedProxyBridgeOutNFTEvent>;

export interface ProxyNFTDeployedEventObject {
  owner: string;
  token: string;
  salt: string;
}
export type ProxyNFTDeployedEvent = TypedEvent<
  [string, string, string],
  ProxyNFTDeployedEventObject
>;

export type ProxyNFTDeployedEventFilter =
  TypedEventFilter<ProxyNFTDeployedEvent>;

export interface CatRelayer extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CatRelayerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    computeAddress(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    deployToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      chainIdForMinting: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateTokensDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleDeployProxyToken(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateProxyBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    computeAddressNFT(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string] & { addr: string }>;

    deployNFT(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      baseUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateNFTDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    handleDeployProxyNFT(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initiateProxyBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  computeAddress(
    salt: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  deployToken(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    decimals: PromiseOrValue<BigNumberish>,
    totalSupply: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    chainIdForMinting: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateBridgeOut(
    tokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    nonce: PromiseOrValue<BigNumberish>,
    trackId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateTokensDeployment(
    params: PromiseOrValue<BytesLike>,
    destinationChains: PromiseOrValue<BigNumberish>[],
    gasValues: PromiseOrValue<BigNumberish>[],
    tokenMintingChain: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleDeployProxyToken(
    existingToken: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateProxyBridgeOut(
    tokenAddress: PromiseOrValue<string>,
    proxyTokenAddress: PromiseOrValue<string>,
    amount: PromiseOrValue<BigNumberish>,
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    nonce: PromiseOrValue<BigNumberish>,
    trackId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  computeAddressNFT(
    salt: PromiseOrValue<BytesLike>,
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  deployNFT(
    name: PromiseOrValue<string>,
    symbol: PromiseOrValue<string>,
    totalSupply: PromiseOrValue<BigNumberish>,
    salt: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    baseUri: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateBridgeOutNFT(
    tokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    nonce: PromiseOrValue<BigNumberish>,
    trackId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateNFTDeployment(
    params: PromiseOrValue<BytesLike>,
    destinationChains: PromiseOrValue<BigNumberish>[],
    gasValues: PromiseOrValue<BigNumberish>[],
    tokenMintingChain: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  handleDeployProxyNFT(
    existingToken: PromiseOrValue<string>,
    salt: PromiseOrValue<BytesLike>,
    owner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initiateProxyBridgeOutNFT(
    tokenAddress: PromiseOrValue<string>,
    proxyTokenAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    recipientChain: PromiseOrValue<BigNumberish>,
    recipient: PromiseOrValue<BytesLike>,
    nonce: PromiseOrValue<BigNumberish>,
    trackId: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    computeAddress(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      chainIdForMinting: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    initiateBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateTokensDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    handleDeployProxyToken(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initiateProxyBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    computeAddressNFT(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployNFT(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      baseUri: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initiateBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initiateNFTDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    handleDeployProxyNFT(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    initiateProxyBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "InitiateTokenDeployment(address,bytes,uint256[],uint256[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      params?: null,
      destinationChains?: null,
      gasValues?: null,
      tokenMintingChain?: null
    ): InitiateTokenDeploymentEventFilter;
    InitiateTokenDeployment(
      owner?: PromiseOrValue<string> | null,
      params?: null,
      destinationChains?: null,
      gasValues?: null,
      tokenMintingChain?: null
    ): InitiateTokenDeploymentEventFilter;

    "InitiatedBridgeOut(address,address,uint256,uint16,bytes32,uint256,uint256,string)"(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedBridgeOutEventFilter;
    InitiatedBridgeOut(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedBridgeOutEventFilter;

    "TokenDeployed(address,address,string,string,uint8,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      decimals?: null,
      salt?: null
    ): TokenDeployedEventFilter;
    TokenDeployed(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      decimals?: null,
      salt?: null
    ): TokenDeployedEventFilter;

    "InitiatedProxyBridgeOut(address,address,address,uint256,uint16,bytes32,uint256,uint256,string)"(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      proxyToken?: null,
      amount?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedProxyBridgeOutEventFilter;
    InitiatedProxyBridgeOut(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      proxyToken?: null,
      amount?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedProxyBridgeOutEventFilter;

    "ProxyTokenDeployed(address,address,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      salt?: null
    ): ProxyTokenDeployedEventFilter;
    ProxyTokenDeployed(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      salt?: null
    ): ProxyTokenDeployedEventFilter;

    "InitiateNFTDeployment(address,bytes,uint256[],uint256[],uint256)"(
      owner?: PromiseOrValue<string> | null,
      params?: null,
      destinationChains?: null,
      gasValues?: null,
      tokenMintingChain?: null
    ): InitiateNFTDeploymentEventFilter;
    InitiateNFTDeployment(
      owner?: PromiseOrValue<string> | null,
      params?: null,
      destinationChains?: null,
      gasValues?: null,
      tokenMintingChain?: null
    ): InitiateNFTDeploymentEventFilter;

    "InitiatedBridgeOutNFT(address,address,uint256,uint16,bytes32,uint256,uint256,string)"(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedBridgeOutNFTEventFilter;
    InitiatedBridgeOutNFT(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      amount?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedBridgeOutNFTEventFilter;

    "NFTDeployed(address,address,string,string,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      salt?: null
    ): NFTDeployedEventFilter;
    NFTDeployed(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      name?: null,
      symbol?: null,
      salt?: null
    ): NFTDeployedEventFilter;

    "InitiatedProxyBridgeOutNFT(address,address,address,uint256,uint16,bytes32,uint256,uint256,string)"(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      proxyToken?: null,
      tokenId?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedProxyBridgeOutNFTEventFilter;
    InitiatedProxyBridgeOutNFT(
      caller?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      proxyToken?: null,
      tokenId?: null,
      destinationChain?: null,
      recipient?: null,
      nonce?: null,
      gasValue?: null,
      trackId?: null
    ): InitiatedProxyBridgeOutNFTEventFilter;

    "ProxyNFTDeployed(address,address,bytes32)"(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      salt?: null
    ): ProxyNFTDeployedEventFilter;
    ProxyNFTDeployed(
      owner?: PromiseOrValue<string> | null,
      token?: PromiseOrValue<string> | null,
      salt?: null
    ): ProxyNFTDeployedEventFilter;
  };

  estimateGas: {
    computeAddress(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      chainIdForMinting: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateTokensDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleDeployProxyToken(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateProxyBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    computeAddressNFT(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    deployNFT(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      baseUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateNFTDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    handleDeployProxyNFT(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initiateProxyBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    computeAddress(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployToken(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      decimals: PromiseOrValue<BigNumberish>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      chainIdForMinting: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateTokensDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleDeployProxyToken(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateProxyBridgeOut(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      amount: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    computeAddressNFT(
      salt: PromiseOrValue<BytesLike>,
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deployNFT(
      name: PromiseOrValue<string>,
      symbol: PromiseOrValue<string>,
      totalSupply: PromiseOrValue<BigNumberish>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      baseUri: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateNFTDeployment(
      params: PromiseOrValue<BytesLike>,
      destinationChains: PromiseOrValue<BigNumberish>[],
      gasValues: PromiseOrValue<BigNumberish>[],
      tokenMintingChain: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    handleDeployProxyNFT(
      existingToken: PromiseOrValue<string>,
      salt: PromiseOrValue<BytesLike>,
      owner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initiateProxyBridgeOutNFT(
      tokenAddress: PromiseOrValue<string>,
      proxyTokenAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      recipientChain: PromiseOrValue<BigNumberish>,
      recipient: PromiseOrValue<BytesLike>,
      nonce: PromiseOrValue<BigNumberish>,
      trackId: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
